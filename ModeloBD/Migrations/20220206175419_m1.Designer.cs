// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModeloBD;

namespace ModeloBD.Migrations
{
    [DbContext(typeof(Repositorio))]
    [Migration("20220206175419_m1")]
    partial class m1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Modelo.Entidades.Cita", b =>
                {
                    b.Property<int>("CitaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha_Cita")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Fecha_Registro")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicoId")
                        .HasColumnType("int");

                    b.Property<string>("Num_Orden")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.HasKey("CitaId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("citas");
                });

            modelBuilder.Entity("Modelo.Entidades.Dia", b =>
                {
                    b.Property<int>("HorarioId")
                        .HasColumnType("int");

                    b.Property<int>("MedicoId")
                        .HasColumnType("int");

                    b.Property<string>("dia")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HorarioId", "MedicoId");

                    b.HasIndex("MedicoId");

                    b.ToTable("dias");
                });

            modelBuilder.Entity("Modelo.Entidades.Especialidad", b =>
                {
                    b.Property<int>("EspecialidadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EspecialidadId");

                    b.ToTable("especialidades");
                });

            modelBuilder.Entity("Modelo.Entidades.Horario", b =>
                {
                    b.Property<int>("HorarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cupos_Totales")
                        .HasColumnType("int");

                    b.Property<DateTime>("Hora_Fin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Hora_Inicio")
                        .HasColumnType("datetime2");

                    b.HasKey("HorarioId");

                    b.ToTable("horarios");
                });

            modelBuilder.Entity("Modelo.Entidades.InformacionPaciente", b =>
                {
                    b.Property<int>("InformacionPacienteId")
                        .HasColumnType("int");

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sexo")
                        .HasColumnType("int");

                    b.Property<string>("Telefono_Convencional")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono_Movil")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InformacionPacienteId");

                    b.ToTable("informacionpacientes");
                });

            modelBuilder.Entity("Modelo.Entidades.Medico", b =>
                {
                    b.Property<int>("MedicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cedula")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EspecialidadId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicoId");

                    b.HasIndex("EspecialidadId");

                    b.ToTable("medicos");
                });

            modelBuilder.Entity("Modelo.Entidades.Paciente", b =>
                {
                    b.Property<int>("PacienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cedula")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PacienteId");

                    b.ToTable("pacientes");
                });

            modelBuilder.Entity("Modelo.Entidades.Cita", b =>
                {
                    b.HasOne("Modelo.Entidades.Medico", "Medico")
                        .WithMany("Citas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Entidades.Paciente", "Paciente")
                        .WithMany("Citas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Modelo.Entidades.Dia", b =>
                {
                    b.HasOne("Modelo.Entidades.Horario", "Horario")
                        .WithMany("Dias")
                        .HasForeignKey("HorarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Modelo.Entidades.Medico", "Medico")
                        .WithMany("Dias")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Horario");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("Modelo.Entidades.InformacionPaciente", b =>
                {
                    b.HasOne("Modelo.Entidades.Paciente", "Paciente")
                        .WithOne("InformacionPaciente")
                        .HasForeignKey("Modelo.Entidades.InformacionPaciente", "InformacionPacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Modelo.Entidades.Medico", b =>
                {
                    b.HasOne("Modelo.Entidades.Especialidad", "Especialidad")
                        .WithMany("Medicos")
                        .HasForeignKey("EspecialidadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Especialidad");
                });

            modelBuilder.Entity("Modelo.Entidades.Especialidad", b =>
                {
                    b.Navigation("Medicos");
                });

            modelBuilder.Entity("Modelo.Entidades.Horario", b =>
                {
                    b.Navigation("Dias");
                });

            modelBuilder.Entity("Modelo.Entidades.Medico", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Dias");
                });

            modelBuilder.Entity("Modelo.Entidades.Paciente", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("InformacionPaciente");
                });
#pragma warning restore 612, 618
        }
    }
}
